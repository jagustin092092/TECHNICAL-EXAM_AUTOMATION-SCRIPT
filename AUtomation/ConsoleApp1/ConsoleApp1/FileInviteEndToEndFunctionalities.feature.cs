// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ConsoleApp1
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FileInviteEndToEndFunctionalities")]
    public partial class FileInviteEndToEndFunctionalitiesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FileInviteEndToEndFunctionalities.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "FileInviteEndToEndFunctionalities", "\tThis is to test the different functionalities and features on FileInvite", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the ability to create new Contact")]
        [NUnit.Framework.CategoryAttribute("mytag1")]
        public virtual void ValidateTheAbilityToCreateNewContact()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate the ability to create new Contact", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I navigate on fileinvite signin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email Address",
                            "Password"});
                table2.AddRow(new string[] {
                            "qatestjsa3@yopmail.com",
                            "Q@t45678123"});
#line 7
 testRunner.And("I sign in using correct email address and password", ((string)(null)), table2, "And ");
#line hidden
#line 10
 testRunner.When("I click Create Person button from Contacts form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "FirstName",
                            "FirstJSA4E"});
                table3.AddRow(new string[] {
                            "LastName",
                            "LastJSA4E"});
                table3.AddRow(new string[] {
                            "Company",
                            "COMPANY JSA4E"});
                table3.AddRow(new string[] {
                            "EmailType",
                            "Home"});
                table3.AddRow(new string[] {
                            "Email",
                            "qatestjsa4e@yopmail.com"});
                table3.AddRow(new string[] {
                            "PhoneType",
                            "Home"});
                table3.AddRow(new string[] {
                            "Mobile",
                            "9985962461233322"});
                table3.AddRow(new string[] {
                            "AddressType",
                            "Office"});
                table3.AddRow(new string[] {
                            "Address1",
                            "Address Test 1"});
                table3.AddRow(new string[] {
                            "Address2",
                            "Address Test 2"});
                table3.AddRow(new string[] {
                            "City",
                            "Malolos"});
                table3.AddRow(new string[] {
                            "State",
                            "Bulacan"});
                table3.AddRow(new string[] {
                            "Country",
                            "Philippines"});
                table3.AddRow(new string[] {
                            "Zip Code",
                            "3000"});
#line 11
 testRunner.And("I enter Contact Details", ((string)(null)), table3, "And ");
#line hidden
#line 27
 testRunner.And("I click Save Contact button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "FirstName",
                            "FirstJSA4E"});
                table4.AddRow(new string[] {
                            "LastName",
                            "LastJSA4E"});
                table4.AddRow(new string[] {
                            "Company",
                            "COMPANY JSA4E"});
                table4.AddRow(new string[] {
                            "Email",
                            "qatestjsa4e@yopmail.com"});
                table4.AddRow(new string[] {
                            "Mobile",
                            "9985962461233322"});
                table4.AddRow(new string[] {
                            "Address1",
                            "Address Test 1"});
                table4.AddRow(new string[] {
                            "Address2",
                            "Address Test 2"});
                table4.AddRow(new string[] {
                            "City",
                            "Malolos"});
                table4.AddRow(new string[] {
                            "State",
                            "Bulacan"});
                table4.AddRow(new string[] {
                            "Zip Code",
                            "3000"});
#line 28
 testRunner.Then("I am able to successfully create a new Contact with correct details", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the ability to create new Company")]
        [NUnit.Framework.CategoryAttribute("mytag2")]
        public virtual void ValidateTheAbilityToCreateNewCompany()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate the ability to create new Company", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
 testRunner.Given("I navigate on fileinvite signin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email Address",
                            "Password"});
                table5.AddRow(new string[] {
                            "qatestjsa3@yopmail.com",
                            "Q@t45678123"});
#line 44
 testRunner.And("I sign in using correct email address and password", ((string)(null)), table5, "And ");
#line hidden
#line 47
 testRunner.When("I click Companies button from Contacts form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "Name",
                            "Company JSA4E"});
                table6.AddRow(new string[] {
                            "Website",
                            "www.google.com"});
                table6.AddRow(new string[] {
                            "EmailType",
                            "Work"});
                table6.AddRow(new string[] {
                            "Email",
                            "qatestjsa4e@yopmail.com"});
                table6.AddRow(new string[] {
                            "PhoneType",
                            "Work"});
                table6.AddRow(new string[] {
                            "Number",
                            "9985962461233321"});
                table6.AddRow(new string[] {
                            "AddressType",
                            "Office"});
                table6.AddRow(new string[] {
                            "Address1",
                            "Address Test 1"});
                table6.AddRow(new string[] {
                            "Address2",
                            "Address Test 2"});
                table6.AddRow(new string[] {
                            "City",
                            "Malolos"});
                table6.AddRow(new string[] {
                            "State",
                            "Bulacan"});
                table6.AddRow(new string[] {
                            "Country",
                            "Philippines"});
                table6.AddRow(new string[] {
                            "ZipCode",
                            "3000"});
#line 48
 testRunner.And("I enter Company Details", ((string)(null)), table6, "And ");
#line hidden
#line 63
 testRunner.And("I click Save Company button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "Name",
                            "Company JSA4E"});
                table7.AddRow(new string[] {
                            "Website",
                            "www.google.com"});
                table7.AddRow(new string[] {
                            "Email",
                            "qatestjsa4e@yopmail.com"});
                table7.AddRow(new string[] {
                            "Number",
                            "9985962461233321"});
                table7.AddRow(new string[] {
                            "Address1",
                            "Address Test 1"});
                table7.AddRow(new string[] {
                            "Address2",
                            "Address Test 2"});
                table7.AddRow(new string[] {
                            "City",
                            "Malolos"});
                table7.AddRow(new string[] {
                            "State",
                            "Bulacan"});
                table7.AddRow(new string[] {
                            "ZipCode",
                            "3000"});
#line 64
 testRunner.Then("I am able to successfully create a new Company with correct details", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the ability to Create Invite")]
        [NUnit.Framework.CategoryAttribute("mytag3")]
        public virtual void ValidateTheAbilityToCreateInvite()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate the ability to Create Invite", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
 testRunner.Given("I navigate on fileinvite signin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email Address",
                            "Password"});
                table8.AddRow(new string[] {
                            "qatestjsa3@yopmail.com",
                            "Q@t45678123"});
#line 79
 testRunner.And("I sign in using correct email address and password", ((string)(null)), table8, "And ");
#line hidden
#line 82
 testRunner.When("I click Create New Invite button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.And("I use existing template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("I select Due Date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.And("I search for Amy Smith as an existing Contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
